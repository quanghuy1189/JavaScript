//----------------------------------------------------------
// arrayToList function builds up a data structure. Best approach is dealing from back to front.
var arrayToList = function (array) {
	var list = null;
	for ( var i = array.length - 1; i >= 0; i-- )
		list = { value: array[i], rest: list};
	return list;
}

console.log(arrayToList([10,40,20]));

// →  { value: 10,
//  rest: { value: 40, rest: { value: 20, rest: null } } }

//----------------------------------------------------------
// listToArray function that produces an array from a list

var listToArray = function (list) {
	var array = [];
	for ( var node = list; node; node = node.rest )
		array.push(node.value);
	return array;
}

console.log(listToArray(arrayToList([10, 20, 30])));

// → [10, 20, 30]

//----------------------------------------------------------
//prepend function takes an element and a list and creates a new list
//that adds the element to the front of the input list

var prepend = function (element, list) {
	return list = { value: element, rest: list};
}

console.log(prepend(150,prepend(20,null)));

//  { value: 150, rest: { value: 20, rest: null } }

//----------------------------------------------------------
//nth function takes a list and a number and return the element at the given position in the list
//or undefined when there is no such element. ( Recursive )

var nth = function(list, num) {
	if (!list)
		return undefined;
	else if (num == 0)
		return list.value;
	else
		return nth(list.rest, num - 1)
}

console.log(nth(arrayToList([10,50,100]),2));

// → 100
